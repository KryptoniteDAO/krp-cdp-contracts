"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.walletVerifyArbitrary = exports.walletSignArbitrary = void 0;
const encoding_1 = require("@cosmjs/encoding");
const walletSignArbitrary = (inputWallet, chainId, signingAddress, data) => __awaiter(void 0, void 0, void 0, function* () {
    if (typeof window === 'undefined' || !window) {
        throw new Error('Window is undefined.');
    }
    if (typeof data === 'string') {
        data = (0, encoding_1.toAscii)(data);
    }
    const windowKey = inputWallet === 'coin98' ? 'keplr' : inputWallet;
    const walletProvider = window[windowKey];
    if (!walletProvider) {
        throw new Error(`Wallet ${inputWallet} is not installed.`);
    }
    return walletProvider.signArbitrary(chainId, signingAddress, data);
});
exports.walletSignArbitrary = walletSignArbitrary;
const walletVerifyArbitrary = (inputWallet, chainId, signingAddress, data, signature) => __awaiter(void 0, void 0, void 0, function* () {
    if (typeof window === 'undefined' || !window) {
        throw new Error('Window is undefined.');
    }
    if (typeof data === 'string') {
        data = (0, encoding_1.toAscii)(data);
    }
    const windowKey = inputWallet === 'coin98' ? 'keplr' : inputWallet;
    const walletProvider = window[windowKey];
    if (!walletProvider) {
        throw new Error(`Wallet ${inputWallet} is not installed.`);
    }
    return walletProvider.verifyArbitrary(chainId, signingAddress, data, signature);
});
exports.walletVerifyArbitrary = walletVerifyArbitrary;

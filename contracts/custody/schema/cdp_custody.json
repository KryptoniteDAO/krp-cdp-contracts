{
  "contract_name": "cdp_custody",
  "contract_version": "0.0.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "collateral_contract",
      "control_contract",
      "liquidation_contract",
      "owner_addr",
      "pool_contract"
    ],
    "properties": {
      "collateral_contract": {
        "type": "string"
      },
      "control_contract": {
        "type": "string"
      },
      "liquidation_contract": {
        "type": "string"
      },
      "owner_addr": {
        "description": "Initial owner address",
        "type": "string"
      },
      "pool_contract": {
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "collateral_contract": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "control_contract": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "liquidation_contract": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "owner_addr": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "pool_contract": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Receive interface for send token. deposit collateral token denom. mint kUSD token.",
        "type": "object",
        "required": [
          "receive"
        ],
        "properties": {
          "receive": {
            "$ref": "#/definitions/Cw20ReceiveMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "redeem_stable_coin"
        ],
        "properties": {
          "redeem_stable_coin": {
            "type": "object",
            "required": [
              "redeem_amount",
              "redeemer"
            ],
            "properties": {
              "redeem_amount": {
                "$ref": "#/definitions/Uint128"
              },
              "redeemer": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "withdraw_collateral"
        ],
        "properties": {
          "withdraw_collateral": {
            "type": "object",
            "required": [
              "collateral_amount",
              "collateral_contract",
              "minter"
            ],
            "properties": {
              "collateral_amount": {
                "$ref": "#/definitions/Uint128"
              },
              "collateral_contract": {
                "type": "string"
              },
              "minter": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "liquidate_collateral"
        ],
        "properties": {
          "liquidate_collateral": {
            "type": "object",
            "required": [
              "amount",
              "liquidator"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "liquidator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Cw20ReceiveMsg": {
        "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "amount",
          "msg",
          "sender"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "collateral_contract",
        "control_contract",
        "liquidation_contract",
        "owner_addr",
        "pool_contract"
      ],
      "properties": {
        "collateral_contract": {
          "type": "string"
        },
        "control_contract": {
          "type": "string"
        },
        "liquidation_contract": {
          "type": "string"
        },
        "owner_addr": {
          "type": "string"
        },
        "pool_contract": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "StateResponse",
      "type": "object",
      "required": [
        "total_amount"
      ],
      "properties": {
        "total_amount": {
          "$ref": "#/definitions/Uint256"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint256": {
          "type": "string"
        }
      }
    }
  }
}

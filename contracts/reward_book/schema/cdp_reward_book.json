{
  "contract_name": "cdp_reward_book",
  "contract_version": "0.0.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "control_contract",
      "custody_contract",
      "reward_contract",
      "reward_denom",
      "threshold"
    ],
    "properties": {
      "control_contract": {
        "type": "string"
      },
      "custody_contract": {
        "type": "string"
      },
      "reward_contract": {
        "type": "string"
      },
      "reward_denom": {
        "type": "string"
      },
      "threshold": {
        "$ref": "#/definitions/Uint256"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Uint256": {
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Owner's operations",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "control_contract": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "custody_contract": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "owner_addr": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "reward_contract": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "reward_denom": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "threshold": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint256"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "bAsset's operations Increase user staking balance Withdraw rewards to pending rewards Set current reward index to global index",
        "type": "object",
        "required": [
          "increase_balance"
        ],
        "properties": {
          "increase_balance": {
            "type": "object",
            "required": [
              "address",
              "amount"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Decrease user staking balance Withdraw rewards to pending rewards Set current reward index to global index",
        "type": "object",
        "required": [
          "decrease_balance"
        ],
        "properties": {
          "decrease_balance": {
            "type": "object",
            "required": [
              "address",
              "amount"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "User's operations Update the global index",
        "type": "object",
        "required": [
          "update_global_index"
        ],
        "properties": {
          "update_global_index": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "for test",
        "type": "object",
        "required": [
          "execute_update_global_index"
        ],
        "properties": {
          "execute_update_global_index": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "return the accrued reward in uusd to the user.",
        "type": "object",
        "required": [
          "claim_rewards"
        ],
        "properties": {
          "claim_rewards": {
            "type": "object",
            "properties": {
              "recipient": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint256": {
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "accrued_rewards"
        ],
        "properties": {
          "accrued_rewards": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "holder"
        ],
        "properties": {
          "holder": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "holders"
        ],
        "properties": {
          "holders": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "accrued_rewards": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AccruedRewardsResponse",
      "type": "object",
      "required": [
        "rewards"
      ],
      "properties": {
        "rewards": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "control_contract",
        "custody_contract",
        "owner",
        "reward_contract",
        "reward_denom"
      ],
      "properties": {
        "control_contract": {
          "type": "string"
        },
        "custody_contract": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "reward_contract": {
          "type": "string"
        },
        "reward_denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "holder": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "HolderResponse",
      "type": "object",
      "required": [
        "address",
        "balance",
        "index",
        "pending_rewards"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "balance": {
          "$ref": "#/definitions/Uint128"
        },
        "index": {
          "$ref": "#/definitions/Decimal"
        },
        "pending_rewards": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "holders": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "HoldersResponse",
      "type": "object",
      "required": [
        "holders"
      ],
      "properties": {
        "holders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HolderResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "HolderResponse": {
          "type": "object",
          "required": [
            "address",
            "balance",
            "index",
            "pending_rewards"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "balance": {
              "$ref": "#/definitions/Uint128"
            },
            "index": {
              "$ref": "#/definitions/Decimal"
            },
            "pending_rewards": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "StateResponse",
      "type": "object",
      "required": [
        "global_index",
        "prev_reward_balance",
        "total_balance"
      ],
      "properties": {
        "global_index": {
          "$ref": "#/definitions/Decimal"
        },
        "prev_reward_balance": {
          "$ref": "#/definitions/Uint128"
        },
        "total_balance": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
